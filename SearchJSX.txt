var values = listItemIds.map(i => { return `<Value Type='Counter'>${i}</Value>`; });

        const viewXml: string = `
        <View Scope='RecursiveAll'>
            <Query>
                <Where>
                    <In>
                        <FieldRef Name='ID' />
                        <Values>
                            ${values.join("")}
                        </Values>
                    </In>
                </Where>
            </Query>
            <RowLimit>${listItemIds.length}</RowLimit>
        </View>`;


// handlePrevious = () => {
    //     this.setState({ page: this.state.page - 1 });
    // }

    // handleNext = () => {
    //     this.setState({ page: this.state.page + 1 });
    // }

    // renderPagination = (page, pages) => {
    //     let previousButton = <li className="previous" onClick={this.handlePrevious}><a href="#"><i className="fa fa-arrow-left"></i> Previous</a></li>;
    //     if (page === 1) {
    //         previousButton = <li className="previous disabled"><a href="#"><i className="fa fa-arrow-left"></i> Previous</a></li>;
    //     }
    //     let nextButton = <li className="next" onClick={this.handleNext}><a href="#">Next <i className="fa fa-arrow-right"></i></a></li>;
    //     if (page === pages) {
    //         nextButton = <li className="next disabled"><a href="#">Next <i className="fa fa-arrow-right"></i></a></li>;
    //     }
    //     return (
    //         <nav>
    //             <ul className="pager">
    //                 {previousButton}
    //                 {nextButton}
    //             </ul>
    //         </nav>
    //     );
    // }



private allListItemAttachments = async () => {
        let providerValue = this.context;
        const { context, services, serverRelativeUrl } = providerValue as IBobCircularRepositoryProps;

        await services.getAllListItemAttachments(serverRelativeUrl, Constants.circularList, 3152).then(async (val) => {

            console.log(val);
            let fileBuffer = val.get(`BOB_BR_116_3152.docx`);
            await this.bufferToBase64(fileBuffer).then((val) => {
                const base64WithoutPrefix = val.substring('data:application/octet-stream;base64,'.length);

                const bytes = atob(base64WithoutPrefix);
                const byteNumbers = new Array(bytes.length);
                for (let i = 0; i < bytes.length; i++) {
                    byteNumbers[i] = bytes.charCodeAt(i);
                }

                const byteArray = new Uint8Array(byteNumbers);

                const blob = new Blob([byteArray], { type: "application/pdf" });

                let objectURL = URL.createObjectURL(blob);

                console.log(objectURL);
                // let length = pdfBytes.length;
                // let out = new Uint8Array(length);

                // while (length--) {
                //     out[length] = bytes.charCodeAt(length);
                // }
                // let blobFile = new Blob([out], { type: "application/pdf" });
            }).catch((error) => {
                console.log(error)
            })
            // let fileName = `BOB_BR_116_3150.pdf`;

        }).catch((error) => {
            console.log(error);
        })



    }

    // if (filterArray.length > 1 && checkBoxFilter.length > 1) {
    //   if (searchTextRefinment != "") {

    //     advanceFilterString += filterArray.length > 1 ? `and(` : ``;
    //     advanceFilterString += filterArray.length > 1 ? `${filterArray.join(',')}` : ``
    //     advanceFilterString += checkBoxFilterString != "" ? `,${checkBoxFilterString}` : ``;
    //     advanceFilterString += filterArray.length > 1 ? `)` : ``;
    //   }
    //   else {
    //     advanceFilterString += filterArray.length > 1 ? `and(` : ``;
    //     advanceFilterString += filterArray.length > 1 ? `${filterArray.join(',')}` : ``
    //     advanceFilterString += checkBoxFilterString != "" ? `,${checkBoxFilterString}` : ``;
    //     advanceFilterString += filterArray.length > 1 ? `)` : ``;
    //   }
    // }
    // else if ((filterArray.length > 1 || filterArray.length == 1) && checkBoxFilterString == "") {
    //   advanceFilterString += filterArray.length > 1 ? `and(` : ``;
    //   advanceFilterString += (filterArray.length > 1 || filterArray.length == 1) ? `${filterArray.join(',')}` : ``;
    //   advanceFilterString += filterArray.length > 1 ? `)` : ``;
    // }
    // else if (filterArray.length == 1 && checkBoxFilterString != "") {
    //   advanceFilterString += filterArray.length == 1 ? `and(` : ``;
    //   advanceFilterString += filterArray.length == 1 ? `${filterArray.join(',')}` : ``;
    //   advanceFilterString += checkBoxFilterString != "" ? `,${checkBoxFilterString}` : ``;
    //   advanceFilterString += filterArray.length == 1 ? `)` : ``;
    // }
    // else if (filterArray.length == 1 || checkBoxFilterString != "") {
    //   if (searchTextRefinment != "") {
    //     advanceFilterString += filterArray.length == 1 && checkBoxFilterString != "" ? `and(` : ``;
    //     advanceFilterString += filterArray.length == 1 ? `${filterArray[0]}` : ``;
    //     advanceFilterString += checkBoxFilterString != "" ? `,${checkBoxFilterString}` : ``;
    //     advanceFilterString += filterArray.length == 1 && checkBoxFilterString != "" ? `)` : ``;

    //   }
    //   else {
    //     advanceFilterString += filterArray.length == 1 && checkBoxFilterString != "" ? `and(` : ``;
    //     advanceFilterString += filterArray.length == 1 ? `${filterArray[0]}` : ``;
    //     advanceFilterString += checkBoxFilterString != "" ? `,${checkBoxFilterString}` : ``;
    //     advanceFilterString += filterArray.length == 1 && checkBoxFilterString != "" ? `)` : ``;
    //   }
    // }
    // else {
    //   advanceFilterString += ``
    // }

    private bufferToBase64 = async (buffer): Promise<any> => {
        // use a FileReader to generate a base64 data URI:
        const base64url = await new Promise(r => {
            const reader = new FileReader()
            reader.onload = () => r(reader.result)
            reader.readAsDataURL(new Blob([buffer]))
        });

        // remove the `data:...;base64,` part from the start
        return Promise.resolve(base64url);
    }

      //context.pageContext.user.email
            // await services.getCurrentUserInformation(`Aditya.Pal@bankofbaroda.com`, Constants.adSelectedColumns).then((val: IADProperties[]) => {
            //     console.log(val)
            // }).catch((error) => {
            //     console.log(error);
            //     this.setState({ isLoading: false })
            // })


            {
              key: 'Subject',
              name: 'Subject',
              fieldName: 'Subject',
              minWidth: 200,
              maxWidth: 450,
              isMultiline: true,
              isRowHeader: true,
              isResizable: true,
              data: 'string',
              styles: { cellName: { width: "100%" } },
              // isPadded: true,
              isSorted: false,
              isSortedDescending: true,
              sortAscendingAriaLabel: 'Sorted A to Z',
              sortDescendingAriaLabel: 'Sorted Z to A',
              onColumnClick: this.handleSorting(`${Constants.colSubject}`),
              headerClassName: styles.header,
              onRender: this.createHyper.bind(this)
            },
            {
              key: 'PublishedDate',
              name: 'Published Date',
              fieldName: 'PublishedDate',
              minWidth: 150,
              maxWidth: 200,
              // isCollapsible: true,
              isResizable: true,
              data: 'string',
              // isPadded: true,
              headerClassName: styles.header,
              styles: { cellName: { width: "100%", textAlign: "center" } },
              isSorted: false,
              isSortedDescending: true,
              sortAscendingAriaLabel: 'Sorted A to Z',
              sortDescendingAriaLabel: 'Sorted Z to A',
              onColumnClick: this.handleSorting(`${Constants.colPublishedDate}`),
              onRender: this.renderDate.bind(this)
        
            },
            {
              key: 'Department',
              name: 'Department',
              fieldName: 'Department',
              minWidth: 200,
              maxWidth: 400,
              isResizable: true,
              data: 'string',
              isSorted: false,
              isSortedDescending: false,
              sortAscendingAriaLabel: 'Sorted A to Z',
              sortDescendingAriaLabel: 'Sorted Z to A',
              styles: { cellName: { width: "100%" } },
              headerClassName: styles.header,
              onColumnClick: this.handleSorting(`${Constants.colCircularNumber}`)
              // isPadded: true,
              //onRender: this.renderCategory.bind(this)
            },
            {
              key: 'CircularNumber',
              name: 'Circular Number',
              fieldName: 'CircularNumber',
              minWidth: 100,
              maxWidth: 150,
              isResizable: true,
              data: 'string',
              isSorted: false,
              isSortedDescending: false,
              sortAscendingAriaLabel: 'Sorted A to Z',
              sortDescendingAriaLabel: 'Sorted Z to A',
              styles: { cellName: { width: "100%" } },
              headerClassName: styles.header,
              onColumnClick: this.handleSorting(`${Constants.colCircularNumber}`)
              // isPadded: true,
              //onRender: this.renderCategory.bind(this)
            },
            {
              key: 'Classification',
              name: 'Classification',
              fieldName: 'Classification',
              minWidth: 100,
              maxWidth: 150,
              isResizable: true,
              data: 'string',
              isSorted: false,
              isSortedDescending: false,
              sortAscendingAriaLabel: 'Sorted A to Z',
              sortDescendingAriaLabel: 'Sorted Z to A',
              styles: { cellName: { width: "100%" } },
              headerClassName: styles.header,
              onColumnClick: this.handleSorting(`${Constants.colClassification}`),
              // isPadded: true,
              //onRender: this.renderTextField.bind(this)
            }






            // await services.getCurrentUserInformation(context.pageContext.user.email, Constants.adSelectedColumns).then((val) => {
            //     circularListItem.Department = val[0]?.department ?? ``
            //     this.setState({ circularListItem })
            // }).catch((error) => {
            //     console.log(error)
            // })
      
      {/* <div className={`${styles.row} ${styles1.search}`} style={{ marginTop: 10 }}>


        <div className={`${styles1.column12} `}>
          <div className={`${styles.row}`}>
            <Label className={`${styles1.column10}`} styles={{ root: { color: "#f26522", fontFamily: 'Roboto' } }}>
              {Constants.hindiSearchCircular} : {Constants.engSearchCircular}
            </Label>
          
          </div>

          <Label styles={{ root: { textDecoration: "underline", padding: 0, fontFamily: 'Roboto' } }} className={`${styles1['text-center']}`}>
            {Constants.hindiSearchHeader}
          </Label>
        </div>
        <div className={`${styles1.column12}`}>
          <Label styles={{ root: { textDecoration: "underline", padding: 0, fontFamily: 'Roboto' } }} className={`${styles1['text-center']}`}>
            {Constants.engSearchHeader}
          </Label>
        </div>
        <div className={`${searchBoxColumn} ${styles1.marginTop}`}>
          {this.searchBox()}
        </div>
        <div className={`${searchClearColumn} ${styles1.marginTop} `} >
          <Switch
            label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{switchSearchText}</FluentLabel>}
            onChange={this.onSwitchChange}
          />
        </div>


        {!isNormalSearch && <>
          <div className={`${styles1.column4}  ${styles1.marginTop}`}>
            {this.pickerControl()}

          </div>
          <div className={`${styles1.column3} ${styles1.marginTop}`}>
            <Field label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{`Circular Number`}</FluentLabel>} ></Field>
            <div className={`${styles1.row}`}>
              <div className={`${styles1.column4}`}>
                {this.checkBoxControl(`Contains`)}
              </div>
              <div className={`${styles1.column8}`} style={{ padding: 0 }}>

                <Input placeholder="Input at least 2 characters"
                  input={{ className: `${styles.input}` }}
                  className={`${styles.input}`}
                  value={circularNumber}
                  onChange={this.onInputChange} />
              </div>
              <div className={`${styles1.column12}`}>
                {this.checkBoxControl(`Starts With`)}
              </div>

              <div className={`${styles1.column12}`}>
                {this.checkBoxControl(`Ends With`)}
              </div>
            </div>
          </div>
         

          <div className={`${styles1.column3} ${styles1.marginTop}`}>
            <Field label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{`Published From Date`}</FluentLabel>} >
              <DatePicker mountNode={{}}
                formatDate={this.onFormatDate}
                value={publishedStartDate}
                contentAfter={
                  <>
                    <FluentUIBtn icon={<ArrowCounterclockwiseRegular />}
                      appearance="transparent"
                      title="Reset"
                      onClick={this.onResetClick.bind(this, `FromDate`)}>
                    </FluentUIBtn>
                    <FluentUIBtn icon={<CalendarRegular />} appearance="transparent"></FluentUIBtn>
                  </>}
                onSelectDate={this.onSelectDate.bind(this, `FromDate`)}
                input={{ style: { fontFamily: "Roboto" } }} />


            </Field>
            <Field label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{`Published To Date`}</FluentLabel>}>
              <DatePicker mountNode={{}}
                formatDate={this.onFormatDate}
                value={publishedEndDate}
                contentAfter={
                  <>
                    <FluentUIBtn
                      icon={<ArrowCounterclockwiseRegular />}
                      appearance="transparent" title="Reset"
                      onClick={this.onResetClick.bind(this, `ToDate`)}>
                    </FluentUIBtn>
                    <FluentUIBtn icon={<CalendarRegular />} appearance="transparent"></FluentUIBtn>

                  </>}
                onSelectDate={this.onSelectDate.bind(this, `ToDate`)}
                input={{ style: { fontFamily: "Roboto" } }} />
            </Field>
          </div>
        </>}

        <div className={`${styles1.column12} ${styles1.marginTop} ${styles1['text-center']}`}>
          {this.searchClearButtons()}
        </div>
      </div > */}
      {/* <div className={`${styles.row}`}>
        <div className={`${detailListClass}`} style={{ padding: 15 }}>
          {this.circularSearchResultsTable()}
        </div>
      </div> */}

      {/* {
        <div className={`${styles1.row}`}>
          <div className={`${styles1.column12}`}>
            {!isLoading && filteredItems.length == 0 && this.noItemFound()}
          </div>
        </div>
      } */}

      {/* {
        previewItems &&
        <div className={`${styles1.row}`}>
          <FileViewer listItem={previewItems}
            stateKey={new Date().toISOString()}
            context={context} onClose={this.onPanelClose}
            onUpdate={this.updateItem}></FileViewer>
        </div>
      } */}

      // {
      //   filteredPageItems && filteredPageItems.length > 0 && filteredPageItems.map((val: ICircularListItem, index) => {
      //     let masterCircularClass = val.Classification == "Master" ? `${styles1.master}` : `${styles1.circular}`;

      //     return <>
      //       <div className={`${styles1.row} ${styles1.searchResultsBox}`}>
      //         <div className={`${styles1.column1} ${styles1['text-center']} ${masterCircularClass} ${styles1.borderRadius}`}>
      //           {val.Classification}
      //         </div>
      //         <div className={`${styles1.column10} ${styles1['text-center']} ${styles1.colorLabel}`}>
      //           {val.CircularNumber}
      //         </div>
      //         <div className={`${styles1.column1} ${styles1['text-center']} ${styles1.master} ${styles1.borderRadius}`} style={{ whiteSpace: "nowrap" }} >
      //           {this.formatDate(val.PublishedDate)}
      //         </div>
      //         <div className={`${styles1.column10}`}>
      //           <Accordion collapsible={isAccordionSelected}
      //             onToggle={this.handleToggle.bind(this, val)}>
      //             <AccordionItem value={val.Id}>
      //               <AccordionHeader button={{ style: { fontWeight: 600 } }}>
      //                 {val.Subject}
      //               </AccordionHeader>
      //               <AccordionPanel className={AnimationClassNames.slideDownIn20}>
      //                 {previewItems && <>
      //                   <div className={`${styles1.row} ${styles1.marginTop}`} >
      //                     <div className={`${styles1.column1}`} >Summary:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.Subject}</div>
      //                     <div className={`${styles1.column1}`} >Department:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.Department}</div>

      //                   </div>
      //                   <div className={`${styles1.row} ${styles1.marginTop}`} >
      //                     <div className={`${styles1.column1}`} style={{ whiteSpace: "nowrap" }}>Issued for:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.IssuedFor}</div>
      //                     <div className={`${styles1.column1}`} >Type:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.CircularType}</div>
      //                   </div>
      //                   <div className={`${styles1.row} ${styles1.marginTop}`}>
      //                   </div>
      //                 </>
      //                 }
      //               </AccordionPanel>
      //             </AccordionItem>
      //           </Accordion>
      //         </div>
      //         <div className={`${styles1.column2}`} style={{ textAlign: "end" }}>
      //           <Button title="View Content" appearance="transparent"
      //             onClick={() => {
      //               this.readItemsAsStream(val);
      //             }}
      //             icon={<EyeRegular />} ></Button>
      //           <Button title="Download" appearance="transparent" icon={<ArrowDownloadRegular />}
      //             onClick={() => { this.downloadCircularContent(val) }}></Button>
      //           <Button title="Share" appearance="transparent" icon={<ShareAndroidRegular />}></Button>
      //         </div>
      //       </div>
      //     </>
      //   })
      // }


      //   largeItem.map(async (item) => {

    //     // let currentItem = items.filter((val) => {
    //     //   return item.ID == val.ID
    //     // })




    //     // let department = currentItem[0].MigratedDepartment ?? ``;
    //     // let migratedDepartment = currentItem[0].Department ?? ``;

    //     //if (migratedDepartment != department) {
    //     // await services.updateItem(serverRelativeUrl, Constants.circularList, parseInt(currentItem.ID), {
    //     //   Department: department,
    //     //   MigratedDepartment: migratedDepartment
    //     // }, `*`).then((updatedVal) => {
    //     //   i++;
    //     //   console.log(`Updated Department current Item ID:${currentItem.ID}`, i)
    //     // }).catch((error) => {
    //     //   console.log(error)
    //     // })
    //   })
    // }).catch((error) => {

    // })




private updateMigratedDepartment = async () => {
    const { items, departments } = this.state;

    let providerValue = this.context;
    const { services, serverRelativeUrl } = providerValue as IBobCircularRepositoryProps;

    let i = 0;

    let departmentMapping = [];

    await services.getPagedListItems(serverRelativeUrl, `DepartmentMapping`, `*`, ``, ``, ``).then((val) => {
      departmentMapping = val;
    }).catch((error) => {

    })

    console.table(departmentMapping);

    departmentMapping.map(async (department) => {

      // let itemBasedonDepartment = items.filter((val) => {
      //   return val.Department == department.Title
      // })

     // if (department.Title == `Corporate & Institutional Credit"`) {

        // let itemBasedonDepartment = items.filter((val) => {
        //   return val.MigratedDepartment == `Corporate & Institutional Credit"`
        // })

        let itemBasedonDepartment = items.filter((val) => {
          return val.Department == department.Title
        })

        console.log(itemBasedonDepartment);
        console.log(`Running for Department:`, itemBasedonDepartment?.length > 0 ? itemBasedonDepartment[0].Department : ``)

        //itemBasedonDepartment[0].Department == itemBasedonDepartment[0].MigratedDepartment

        if (itemBasedonDepartment.length > 0) {
          await services.updateItemBatch(serverRelativeUrl, Constants.circularList, itemBasedonDepartment, items, department).then((val) => {
            console.log(val.length)
            console.log(`Update completed for department`, department?.Department)
          }).catch((error) => {
            console.log(error);
          })

        }
     // }
    })

  }

  ----------------------------------------------------


    // let updateColl = await Promise.all(items.slice(101, 200).map(async (currentItem) => {

    //   let department = currentItem?.MigratedDepartment ?? ``;
    //   let migratedDepartment = currentItem?.Department ?? ``;

    //   //if (migratedDepartment != department) {
    //     await services.updateItem(serverRelativeUrl, Constants.circularList, parseInt(currentItem.ID), {
    //       Department: department,
    //       MigratedDepartment: migratedDepartment
    //     }, `*`).then((updatedVal) => {
    //       i++;
    //       console.log(`Updated Department current Item ID:${currentItem.ID}`, i)
    //     }).catch((error) => {
    //       console.log(error)
    //     })
    //   //}
    // }))