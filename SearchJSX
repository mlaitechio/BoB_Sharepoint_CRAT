
      //context.pageContext.user.email
            // await services.getCurrentUserInformation(`Aditya.Pal@bankofbaroda.com`, Constants.adSelectedColumns).then((val: IADProperties[]) => {
            //     console.log(val)
            // }).catch((error) => {
            //     console.log(error);
            //     this.setState({ isLoading: false })
            // })







            // await services.getCurrentUserInformation(context.pageContext.user.email, Constants.adSelectedColumns).then((val) => {
            //     circularListItem.Department = val[0]?.department ?? ``
            //     this.setState({ circularListItem })
            // }).catch((error) => {
            //     console.log(error)
            // })
      
      {/* <div className={`${styles.row} ${styles1.search}`} style={{ marginTop: 10 }}>


        <div className={`${styles1.column12} `}>
          <div className={`${styles.row}`}>
            <Label className={`${styles1.column10}`} styles={{ root: { color: "#f26522", fontFamily: 'Roboto' } }}>
              {Constants.hindiSearchCircular} : {Constants.engSearchCircular}
            </Label>
          
          </div>

          <Label styles={{ root: { textDecoration: "underline", padding: 0, fontFamily: 'Roboto' } }} className={`${styles1['text-center']}`}>
            {Constants.hindiSearchHeader}
          </Label>
        </div>
        <div className={`${styles1.column12}`}>
          <Label styles={{ root: { textDecoration: "underline", padding: 0, fontFamily: 'Roboto' } }} className={`${styles1['text-center']}`}>
            {Constants.engSearchHeader}
          </Label>
        </div>
        <div className={`${searchBoxColumn} ${styles1.marginTop}`}>
          {this.searchBox()}
        </div>
        <div className={`${searchClearColumn} ${styles1.marginTop} `} >
          <Switch
            label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{switchSearchText}</FluentLabel>}
            onChange={this.onSwitchChange}
          />
        </div>


        {!isNormalSearch && <>
          <div className={`${styles1.column4}  ${styles1.marginTop}`}>
            {this.pickerControl()}

          </div>
          <div className={`${styles1.column3} ${styles1.marginTop}`}>
            <Field label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{`Circular Number`}</FluentLabel>} ></Field>
            <div className={`${styles1.row}`}>
              <div className={`${styles1.column4}`}>
                {this.checkBoxControl(`Contains`)}
              </div>
              <div className={`${styles1.column8}`} style={{ padding: 0 }}>

                <Input placeholder="Input at least 2 characters"
                  input={{ className: `${styles.input}` }}
                  className={`${styles.input}`}
                  value={circularNumber}
                  onChange={this.onInputChange} />
              </div>
              <div className={`${styles1.column12}`}>
                {this.checkBoxControl(`Starts With`)}
              </div>

              <div className={`${styles1.column12}`}>
                {this.checkBoxControl(`Ends With`)}
              </div>
            </div>
          </div>
         

          <div className={`${styles1.column3} ${styles1.marginTop}`}>
            <Field label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{`Published From Date`}</FluentLabel>} >
              <DatePicker mountNode={{}}
                formatDate={this.onFormatDate}
                value={publishedStartDate}
                contentAfter={
                  <>
                    <FluentUIBtn icon={<ArrowCounterclockwiseRegular />}
                      appearance="transparent"
                      title="Reset"
                      onClick={this.onResetClick.bind(this, `FromDate`)}>
                    </FluentUIBtn>
                    <FluentUIBtn icon={<CalendarRegular />} appearance="transparent"></FluentUIBtn>
                  </>}
                onSelectDate={this.onSelectDate.bind(this, `FromDate`)}
                input={{ style: { fontFamily: "Roboto" } }} />


            </Field>
            <Field label={<FluentLabel weight="semibold" style={{ fontFamily: "Roboto" }}>{`Published To Date`}</FluentLabel>}>
              <DatePicker mountNode={{}}
                formatDate={this.onFormatDate}
                value={publishedEndDate}
                contentAfter={
                  <>
                    <FluentUIBtn
                      icon={<ArrowCounterclockwiseRegular />}
                      appearance="transparent" title="Reset"
                      onClick={this.onResetClick.bind(this, `ToDate`)}>
                    </FluentUIBtn>
                    <FluentUIBtn icon={<CalendarRegular />} appearance="transparent"></FluentUIBtn>

                  </>}
                onSelectDate={this.onSelectDate.bind(this, `ToDate`)}
                input={{ style: { fontFamily: "Roboto" } }} />
            </Field>
          </div>
        </>}

        <div className={`${styles1.column12} ${styles1.marginTop} ${styles1['text-center']}`}>
          {this.searchClearButtons()}
        </div>
      </div > */}
      {/* <div className={`${styles.row}`}>
        <div className={`${detailListClass}`} style={{ padding: 15 }}>
          {this.circularSearchResultsTable()}
        </div>
      </div> */}

      {/* {
        <div className={`${styles1.row}`}>
          <div className={`${styles1.column12}`}>
            {!isLoading && filteredItems.length == 0 && this.noItemFound()}
          </div>
        </div>
      } */}

      {/* {
        previewItems &&
        <div className={`${styles1.row}`}>
          <FileViewer listItem={previewItems}
            stateKey={new Date().toISOString()}
            context={context} onClose={this.onPanelClose}
            onUpdate={this.updateItem}></FileViewer>
        </div>
      } */}

      // {
      //   filteredPageItems && filteredPageItems.length > 0 && filteredPageItems.map((val: ICircularListItem, index) => {
      //     let masterCircularClass = val.Classification == "Master" ? `${styles1.master}` : `${styles1.circular}`;

      //     return <>
      //       <div className={`${styles1.row} ${styles1.searchResultsBox}`}>
      //         <div className={`${styles1.column1} ${styles1['text-center']} ${masterCircularClass} ${styles1.borderRadius}`}>
      //           {val.Classification}
      //         </div>
      //         <div className={`${styles1.column10} ${styles1['text-center']} ${styles1.colorLabel}`}>
      //           {val.CircularNumber}
      //         </div>
      //         <div className={`${styles1.column1} ${styles1['text-center']} ${styles1.master} ${styles1.borderRadius}`} style={{ whiteSpace: "nowrap" }} >
      //           {this.formatDate(val.PublishedDate)}
      //         </div>
      //         <div className={`${styles1.column10}`}>
      //           <Accordion collapsible={isAccordionSelected}
      //             onToggle={this.handleToggle.bind(this, val)}>
      //             <AccordionItem value={val.Id}>
      //               <AccordionHeader button={{ style: { fontWeight: 600 } }}>
      //                 {val.Subject}
      //               </AccordionHeader>
      //               <AccordionPanel className={AnimationClassNames.slideDownIn20}>
      //                 {previewItems && <>
      //                   <div className={`${styles1.row} ${styles1.marginTop}`} >
      //                     <div className={`${styles1.column1}`} >Summary:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.Subject}</div>
      //                     <div className={`${styles1.column1}`} >Department:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.Department}</div>

      //                   </div>
      //                   <div className={`${styles1.row} ${styles1.marginTop}`} >
      //                     <div className={`${styles1.column1}`} style={{ whiteSpace: "nowrap" }}>Issued for:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.IssuedFor}</div>
      //                     <div className={`${styles1.column1}`} >Type:</div>
      //                     <div className={`${styles1.column5} ${styles1.paddingLeft}`} style={{ fontWeight: 600 }}>{previewItems.CircularType}</div>
      //                   </div>
      //                   <div className={`${styles1.row} ${styles1.marginTop}`}>
      //                   </div>
      //                 </>
      //                 }
      //               </AccordionPanel>
      //             </AccordionItem>
      //           </Accordion>
      //         </div>
      //         <div className={`${styles1.column2}`} style={{ textAlign: "end" }}>
      //           <Button title="View Content" appearance="transparent"
      //             onClick={() => {
      //               this.readItemsAsStream(val);
      //             }}
      //             icon={<EyeRegular />} ></Button>
      //           <Button title="Download" appearance="transparent" icon={<ArrowDownloadRegular />}
      //             onClick={() => { this.downloadCircularContent(val) }}></Button>
      //           <Button title="Share" appearance="transparent" icon={<ShareAndroidRegular />}></Button>
      //         </div>
      //       </div>
      //     </>
      //   })
      // }